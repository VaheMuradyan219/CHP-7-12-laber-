using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        Console.WriteLine("Start as (1) Server or (2) Client?");
        string choice = Console.ReadLine();
        if (choice == "1")
        {
            UDPServer server = new UDPServer(8888);
            server.Start();
            Console.ReadKey();
            server.Stop();
        }
        else if (choice == "2")
        {
            UDPClient client = new UDPClient("127.0.0.1", 8888);
            while (true)
            {
                Console.Write("Enter message (or 'exit' to quit): ");
                string message = Console.ReadLine().Trim();
                if (message.ToLower() == "exit") break;
                client.SendDatagram(message);
                string response = client.ReceiveDatagram();
                if (response != null) Console.WriteLine($"Received from server: {response}");
            }
            client.Close();
        }
    }
}

class UDPServer
{
    private UdpClient _server;
    private IPEndPoint _listenEndpoint;

    public UDPServer(int port)
    {
        _server = new UdpClient(port);
        _listenEndpoint = new IPEndPoint(IPAddress.Any, port);
    }

    public void Start()
    {
        Console.WriteLine("UDP Server started...");
        Task.Run(ReceiveLoop);
    }

    private async Task ReceiveLoop()
    {
        while (true)
        {
            try
            {
                UdpReceiveResult result = await _server.ReceiveAsync();
                string receivedMessage = Encoding.UTF8.GetString(result.Buffer);
                Console.WriteLine($"Received from {result.RemoteEndPoint}: {receivedMessage}");
                string responseMessage = $"Server received: {receivedMessage}";
                byte[] responseData = Encoding.UTF8.GetBytes(responseMessage);
                await _server.SendAsync(responseData, responseData.Length, result.RemoteEndPoint);
            }
            catch (Exception e)
            {
                Console.WriteLine($"Server error: {e.Message}");
            }
        }
    }

    public void Stop()
    {
        _server.Close();
    }
}

class UDPClient
{
    private UdpClient _client;
    private IPEndPoint _serverEndpoint;

    public UDPClient(string server, int port)
    {
        _client = new UdpClient();
        _serverEndpoint = new IPEndPoint(IPAddress.Parse(server), port);
        _client.Client.ReceiveTimeout = 5000;
    }

    public void SendDatagram(string message)
    {
        try
        {
            byte[] data = Encoding.UTF8.GetBytes(message);
            _client.Send(data, data.Length, _serverEndpoint);
        }
        catch (SocketException e)
        {
            Console.WriteLine($"Error sending datagram: {e.Message}");
        }
    }

    public string ReceiveDatagram()
    {
        try
        {
            var remoteEndpoint = new IPEndPoint(IPAddress.Any, 0);
            byte[] data = _client.Receive(ref remoteEndpoint);
            return Encoding.UTF8.GetString(data);
        }
        catch (SocketException e) when (e.SocketErrorCode == SocketError.TimedOut)
        {
            Console.WriteLine("Error: Timeout while waiting for a response.");
            return null;
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error receiving datagram: {e.Message}");
            return null;
        }
    }

    public void Close()
    {
        _client.Close();
    }
}
